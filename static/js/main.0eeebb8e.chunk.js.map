{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","memo","todos","selectedTodo","choseTodo","className","map","todo","isSelected","id","classNames","completed","title","type","onClick","TodoFilter","filterQuery","applyFilter","applyQuery","useState","query","setQuery","onChange","event","filterBy","target","value","defaultValue","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","isLoaded","setIsLoaded","user","setUser","useEffect","userId","userResponse","finally","href","name","App","setTodos","isLoading","setIsLoading","setFilterQuery","searchQuery","setSearchQuery","setSelectedTodo","response","visibleTodos","useMemo","rawTodos","filter","toLowerCase","includes","useCallback","clearSelectedTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0eeebb8e.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: null | Todo\n  choseTodo: (todo: null | Todo) => void,\n};\nexport const TodoList: React.FC<Props> = memo(({\n  todos,\n  selectedTodo,\n  choseTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const isSelected = todo.id === selectedTodo?.id;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': isSelected,\n            })}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  choseTodo(todo);\n                }}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames('far', {\n                      'fa-eye': !isSelected,\n                      'fa-eye-slash': isSelected,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n      {/*\n      <tr data-cy=\"todo\" className=\"has-background-info-light\">\n        <td className=\"is-vcentered\">2</td>\n        <td className=\"is-vcentered\" />\n        <td className=\"is-vcentered is-expanded\">\n          <p className=\"has-text-danger\">quis ut nam facilis et officia qui</p>\n        </td>\n        <td className=\"has-text-right is-vcentered\">\n          <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n            <span className=\"icon\">\n              <i className=\"far fa-eye-slash\" />\n            </span>\n          </button>\n        </td>\n      </tr>\n\n      <tr data-cy=\"todo\" className=\"\">\n        <td className=\"is-vcentered\">1</td>\n        <td className=\"is-vcentered\" />\n        <td className=\"is-vcentered is-expanded\">\n          <p className=\"has-text-danger\">delectus aut autem</p>\n        </td>\n        <td className=\"has-text-right is-vcentered\">\n          <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n            <span className=\"icon\">\n              <i className=\"far fa-eye\" />\n            </span>\n          </button>\n        </td>\n      </tr>\n\n      <tr data-cy=\"todo\" className=\"\">\n        <td className=\"is-vcentered\">6</td>\n        <td className=\"is-vcentered\" />\n        <td className=\"is-vcentered is-expanded\">\n          <p className=\"has-text-danger\">\n            qui ullam ratione quibusdam voluptatem quia omnis\n          </p>\n        </td>\n        <td className=\"has-text-right is-vcentered\">\n          <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n            <span className=\"icon\">\n              <i className=\"far fa-eye\" />\n            </span>\n          </button>\n        </td>\n      </tr>\n\n      <tr data-cy=\"todo\" className=\"\">\n        <td className=\"is-vcentered\">8</td>\n        <td className=\"is-vcentered\">\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </td>\n        <td className=\"is-vcentered is-expanded\">\n          <p className=\"has-text-success\">quo adipisci enim quam ut ab</p>\n        </td>\n        <td className=\"has-text-right is-vcentered\">\n          <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n            <span className=\"icon\">\n              <i className=\"far fa-eye\" />\n            </span>\n          </button>\n        </td>\n      </tr> */}\n    </tbody>\n  </table>\n));\n","import { useState } from 'react';\n\ntype Props = {\n  filterQuery: string,\n  applyFilter: (value: string) => void,\n  applyQuery: (query: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  filterQuery,\n  applyFilter,\n  applyQuery,\n}) => {\n  const [query, setQuery] = useState('');\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const filterBy = event.target.value;\n\n    if (filterBy !== filterQuery) {\n      applyFilter(filterBy);\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  const handleReset = () => {\n    setQuery('');\n    applyQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelect}\n            defaultValue={filterQuery}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleReset}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  onClose: () => void;\n  todo: Todo\n};\n\nexport const TodoModal: React.FC<Props> = ({ onClose, todo }) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [user, setUser] = useState<null | User>(null);\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(userResponse => setUser(userResponse))\n      .finally(() => setIsLoaded(true));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isLoaded ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames({\n                'has-text-danger': !todo?.completed,\n                'has-text-success': todo?.completed,\n              })}\n              >\n                {todo?.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [filterQuery, setFilterQuery] = useState('all');\n  const [searchQuery, setSearchQuery] = useState<null | string>(null);\n  const [selectedTodo, setSelectedTodo] = useState<null | Todo>(null);\n\n  useEffect(() => {\n    getTodos()\n      .then(response => setTodos(response))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    const rawTodos = filterQuery === 'all'\n      ? todos\n      : todos.filter(todo => {\n        if (filterQuery === 'active') {\n          return !todo.completed;\n        }\n\n        return todo.completed;\n      });\n\n    if (searchQuery) {\n      return rawTodos.filter(todo => (\n        todo.title.toLowerCase().includes(searchQuery.toLowerCase())\n      ));\n    }\n\n    return rawTodos;\n  }, [todos, filterQuery, searchQuery]);\n\n  const applyFilter = useCallback((value) => setFilterQuery(value), []);\n  const applyQuery = useCallback((value) => setSearchQuery(value), []);\n  const clearSelectedTodo = useCallback(() => setSelectedTodo(null), []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterQuery={filterQuery}\n                applyFilter={applyFilter}\n                applyQuery={applyQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && visibleTodos\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodo={selectedTodo}\n                    choseTodo={setSelectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          onClose={clearSelectedTodo}\n          todo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}